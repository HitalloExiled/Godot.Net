namespace Godot.Net.Drivers.Vulkan;

using Godot.Net.Core.Error;
using Godot.Net.Core.Math;
using Godot.Net.Platforms.Windows;
using Godot.Net.Servers.Rendering;

public class RenderingDeviceVulkan : RenderingDevice
{
    public override void Barrier(BarrierMask from = BarrierMask.BARRIER_MASK_ALL_BARRIERS, BarrierMask to = BarrierMask.BARRIER_MASK_ALL_BARRIERS) => throw new NotImplementedException();
    public override Error BufferClear(Guid buffer, uint offset, uint size, BarrierMask postBarrier = BarrierMask.BARRIER_MASK_ALL_BARRIERS) => throw new NotImplementedException();
    public override byte[] BufferGetData(Guid buffer, uint offset = 0, uint size = 0) => throw new NotImplementedException();
    public override Error BufferUpdate(Guid buffer, uint offset, uint size, object? data, BarrierMask postBarrier = BarrierMask.BARRIER_MASK_ALL_BARRIERS) => throw new NotImplementedException();
    public override void CaptureTimestamp(string name) => throw new NotImplementedException();
    public override void ComputeListAddBarrier(long list) => throw new NotImplementedException();
    public override long ComputeListBegin(bool allowDrawOverlap = false) => throw new NotImplementedException();
    public override void ComputeListBindComputePipeline(long list, Guid computePipeline) => throw new NotImplementedException();
    public override void ComputeListBindUniformSet(long list, Guid uniformSet, uint index) => throw new NotImplementedException();
    public override void ComputeListDispatch(long list, uint xGroups, uint yGroups, uint zGroups) => throw new NotImplementedException();
    public override void ComputeListDispatchIndirect(long list, Guid buffer, uint offset) => throw new NotImplementedException();
    public override void ComputeListDispatchThreads(long list, uint xThreads, uint yThreads, uint zThreads) => throw new NotImplementedException();
    public override void ComputeListEnd(BarrierMask postBarrier = BarrierMask.BARRIER_MASK_ALL_BARRIERS) => throw new NotImplementedException();
    public override void ComputeListSetPushConstant(long list, object? data, uint dataSize) => throw new NotImplementedException();
    public override Guid ComputePipelineCreate(Guid shader, PipelineSpecializationConstant[]? specializationConstants = null) => throw new NotImplementedException();
    public override bool ComputePipelineIsValid(Guid pipeline) => throw new NotImplementedException();
    public override RenderingDevice CreateLocalDevice() => throw new NotImplementedException();
    public override void DrawCommandBeginLabel(string labelName, Color color = default) => throw new NotImplementedException();
    public override void DrawCommandEndLabel() => throw new NotImplementedException();
    public override void DrawCommandInsertLabel(string labelName, Color color = default) => throw new NotImplementedException();
    public override long DrawListBegin(Guid framebuffer, InitialAction initialColorAction, FinalAction finalColorAction, InitialAction initialDepthAction, FinalAction finalDepthAction, Color[]? clearColorValues = null, float clearDepth = 1, uint clearStencil = 0, Rect2<float> region = default, Guid[]? storageTextures = null) => throw new NotImplementedException();
    public override long DrawListBeginForScreen(int screen = 0, Color clearColor = default) => throw new NotImplementedException();
    public override Error DrawListBeginSplit(Guid framebuffer, uint splits, out long splitIds, InitialAction initialColorAction, FinalAction finalColorAction, InitialAction initialDepthAction, FinalAction finalDepthAction, Color[]? clearColorValues = null, float clearDepth = 1, uint clearStencil = 0, Rect2<float> region = default, Guid[]? storageTextures = null) => throw new NotImplementedException();
    public override void DrawListBindIndexArray(long list, Guid indexArray) => throw new NotImplementedException();
    public override void DrawListBindRenderPipeline(long list, Guid renderPipeline) => throw new NotImplementedException();
    public override void DrawListBindUniformSet(long list, Guid uniformSet, uint index) => throw new NotImplementedException();
    public override void DrawListBindVertexArray(long list, Guid vertexArray) => throw new NotImplementedException();
    public override void DrawListDisableScissor(long list) => throw new NotImplementedException();
    public override void DrawListDraw(long list, bool useIndices, uint instances = 1, uint proceduralVertices = 0) => throw new NotImplementedException();
    public override void DrawListEnableScissor(long list, Rect2<float> rect) => throw new NotImplementedException();
    public override void DrawListEnd(BarrierMask postBarrier = BarrierMask.BARRIER_MASK_ALL_BARRIERS) => throw new NotImplementedException();
    public override uint DrawListGetCurrentPass() => throw new NotImplementedException();
    public override void DrawListSetBlendConstants(long list, Color color) => throw new NotImplementedException();
    public override void DrawListSetLineWidth(long list, float width) => throw new NotImplementedException();
    public override void DrawListSetPushConstant(long list, object? data, uint dataSize) => throw new NotImplementedException();
    public override long DrawListSwitchToNextPass() => throw new NotImplementedException();
    public override Error DrawListSwitchToNextPassSplit(uint splits, out long splitIds) => throw new NotImplementedException();
    public override long FramebufferFormatCreate(AttachmentFormat[] format, uint viewCount = 1) => throw new NotImplementedException();
    public override long FramebufferFormatCreateEmpty(TextureSamples samples = TextureSamples.TEXTURE_SAMPLES_1) => throw new NotImplementedException();
    public override long FramebufferFormatCreateMultipass(AttachmentFormat[] attachments, FramebufferPass[] passes, uint viewCount = 1) => throw new NotImplementedException();
    public override TextureSamples FramebufferFormatGetTextureSamples(long format, uint pass = 0) => throw new NotImplementedException();
    public override long FramebufferGetFormat(Guid framebuffer) => throw new NotImplementedException();
    public override bool FramebufferIsValid(Guid framebuffer) => throw new NotImplementedException();
    public override void Free(Guid id) => throw new NotImplementedException();
    public override void FullBarrier() => throw new NotImplementedException();
    public override ulong GetCapturedTimestamcpuTime(uint index) => throw new NotImplementedException();
    public override ulong GetCapturedTimestamgpuTime(uint index) => throw new NotImplementedException();
    public override string GetCapturedTimestamname(uint index) => throw new NotImplementedException();
    public override uint GetCapturedTimestampsCount() => throw new NotImplementedException();
    public override ulong GetCapturedTimestampsFrame() => throw new NotImplementedException();
    public override string GetDeviceApiVersion() => throw new NotImplementedException();
    public override string GetDeviceName() => throw new NotImplementedException();
    public override string GetDevicePipelineCacheUuid() => throw new NotImplementedException();
    public override DeviceType GetDeviceType() => throw new NotImplementedException();
    public override string GetDeviceVendorName() => throw new NotImplementedException();
    public override ulong GetDriverResource(DriverResource resource, Guid id = default, ulong index = 0) => throw new NotImplementedException();
    public override uint GetFrameDelay() => throw new NotImplementedException();
    public override ulong GetMemoryUsage(MemoryType type) => throw new NotImplementedException();
    public override bool HasFeature(Features feature) => throw new NotImplementedException();
    public override Guid IndexArrayCreate(Guid indexBuffer, uint indexOffset, uint indexCount) => throw new NotImplementedException();
    public override Guid IndexBufferCreate(uint sizeIndices, IndexBufferFormat format, byte[]? data = null, bool useRestartIndices = false) => throw new NotImplementedException();
    public override ulong LimitGet(Limit limit) => throw new NotImplementedException();
    public override void PrepareScreenForDrawing() => throw new NotImplementedException();
    public override Guid RenderPipelineCreate(Guid shader, long framebufferFormat, long vertexFormat, RenderPrimitive renderPrimitive, PipelineRasterizationState rasterizationState, PipelineMultisampleState multisampleState, PipelineDepthStencilState depthStencilState, PipelineColorBlendState blendState, PipelineDynamicStateFlags dynamicStateFlags = 0, uint forRenderPass = 0, PipelineSpecializationConstant[]? specializationConstants = null) => throw new NotImplementedException();
    public override bool RenderPipelineIsValid(Guid pipeline) => throw new NotImplementedException();
    public override Guid SamplerCreate(SamplerState state) => throw new NotImplementedException();
    public override long ScreenGetFramebufferFormat() => throw new NotImplementedException();
    public override int ScreenGetHeight(int screen = 0) => throw new NotImplementedException();
    public override int ScreenGetWidth(int screen = 0) => throw new NotImplementedException();
    public override void SetResourceName(Guid id, string name) => throw new NotImplementedException();
    public override byte[] ShaderCompileBinaryFromSpirv(ShaderStageSPIRVData[] spirv, string shaderName = "") => throw new NotImplementedException();
    public override Guid ShaderCreateFromBytecode(byte[] shaderBinary) => throw new NotImplementedException();
    public override string ShaderGetBinaryCacheKey() => throw new NotImplementedException();
    public override uint ShaderGetVertexInputAttributeMask(Guid shader) => throw new NotImplementedException();
    public override Guid StorageBufferCreate(uint size, byte[]? data = null, StorageBufferUsage usage = 0) => throw new NotImplementedException();
    public override void Submit() => throw new NotImplementedException();
    public override void Swabuffers() => throw new NotImplementedException();
    public override void Sync() => throw new NotImplementedException();
    public override Guid TextureBufferCreate(uint sizeElements, DataFormat format, byte[]? data = null) => throw new NotImplementedException();
    public override Error TextureClear(Guid texture, Color color, uint baseMipmap, uint mipmaps, uint baseLayer, uint layers, BarrierMask postBarrier = BarrierMask.BARRIER_MASK_ALL_BARRIERS) => throw new NotImplementedException();
    public override Error TextureCopy(Guid fromTexture, Guid toTexture, Vector3<float> from, Vector3<float> to, Vector3<float> size, uint srcMipmap, uint dstMipmap, uint srcLayer, uint dstLayer, BarrierMask postBarrier = BarrierMask.BARRIER_MASK_ALL_BARRIERS) => throw new NotImplementedException();
    public override Guid TextureCreate(TextureFormat format, TextureView view, byte[][]? data = null) => throw new NotImplementedException();
    public override Guid TextureCreateFromExtension(TextureType type, DataFormat format, TextureSamples samples, ulong flags, ulong image, ulong width, ulong height, ulong depth, ulong layers) => throw new NotImplementedException();
    public override Guid TextureCreateShared(TextureView view, Guid withTexture) => throw new NotImplementedException();
    public override Guid TextureCreateSharedFromSlice(TextureView view, Guid withTexture, uint layer, uint mipmap, uint mipmaps = 1, TextureSliceType sliceType = TextureSliceType.TEXTURE_SLICE_2D, uint layers = 0) => throw new NotImplementedException();
    public override byte[] TextureGetData(Guid texture, uint layer) => throw new NotImplementedException();
    public override bool TextureIsFormatSupportedForUsage(DataFormat format, TextureUsageBits usage) => throw new NotImplementedException();
    public override bool TextureIsShared(Guid texture) => throw new NotImplementedException();
    public override bool TextureIsValid(Guid texture) => throw new NotImplementedException();
    public override Error TextureResolveMultisample(Guid fromTexture, Guid toTexture, BarrierMask postBarrier = BarrierMask.BARRIER_MASK_ALL_BARRIERS) => throw new NotImplementedException();
    public override Vector2<int> TextureSize(Guid texture) => throw new NotImplementedException();
    public override Error TextureUpdate(Guid texture, uint layer, byte[] data, BarrierMask postBarrier = BarrierMask.BARRIER_MASK_ALL_BARRIERS) => throw new NotImplementedException();
    public override Guid UniformBufferCreate(uint sizeBytes, byte[]? data = null) => throw new NotImplementedException();
    public override Guid UniformSetCreate(Uniform[] uniforms, Guid shader, uint shaderSet) => throw new NotImplementedException();
    public override bool UniformSetIsValid(Guid uniformSet) => throw new NotImplementedException();
    public override void UniformSetSetInvalidationCallback(Guid uniformSet, InvalidationCallback callback, object? userdata) => throw new NotImplementedException();
    public override Guid VertexArrayCreate(uint vertexCount, long vertexFormat, Guid[] srcbuffers, ulong[]? offsets = null) => throw new NotImplementedException();
    public override Guid VertexBufferCreate(uint sizeBytes, byte[]? data = null, bool useAsStorage = false) => throw new NotImplementedException();
    public override long VertexFormatCreate(VertexAttribute[] vertexFormats) => throw new NotImplementedException();
    public void Initialize(VulkanContextWindows contextVulkan) => throw new NotImplementedException();
}
