# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

[*]
indent_style             = space
indent_size              = 4
end_of_line              = lf
charset                  = utf-8
trim_trailing_whitespace = true
insert_final_newline     = true

[*.cs]

# styles

dotnet_naming_style.upper_case_style.capitalization  = all_upper
dotnet_naming_style.upper_case_style.word_separator  = _

dotnet_naming_style.camel_case_style.capitalization  = camel_case

dotnet_naming_style.async_camel_case_style.capitalization  = camel_case
dotnet_naming_style.async_camel_case_style.required_suffix = Async

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

dotnet_naming_style.i_pascal_case_style.capitalization  = pascal_case
dotnet_naming_style.i_pascal_case_style.required_prefix = I

dotnet_naming_style.async_pascal_case_style.capitalization  = pascal_case
dotnet_naming_style.async_pascal_case_style.required_suffix = Async

# namespace

dotnet_naming_symbols.namespace_symbols.applicable_kinds           = namespace
dotnet_naming_symbols.namespace_symbols.applicable_accessibilities = *

dotnet_naming_rule.namespace_rule.symbols  = enums_symbols
dotnet_naming_rule.namespace_rule.style    = pascal_case_style
dotnet_naming_rule.namespace_rule.severity = suggestion

# class

dotnet_naming_symbols.class_symbols.applicable_kinds           = class
dotnet_naming_symbols.class_symbols.applicable_accessibilities = *

dotnet_naming_rule.class_rule.symbols  = class_symbols
dotnet_naming_rule.class_rule.style    = pascal_case_style
dotnet_naming_rule.class_rule.severity = suggestion

# struct

dotnet_naming_symbols.struct_symbols.applicable_kinds           = class
dotnet_naming_symbols.struct_symbols.applicable_accessibilities = *

dotnet_naming_rule.struct_rule.symbols  = struct_symbols
dotnet_naming_rule.struct_rule.style    = pascal_case_style
dotnet_naming_rule.struct_rule.severity = suggestion

# interface

dotnet_naming_symbols.interface_symbols.applicable_kinds           = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = *

dotnet_naming_rule.interface_rule.symbols  = interface_symbols
dotnet_naming_rule.interface_rule.style    = i_pascal_case_style
dotnet_naming_rule.interface_rule.severity = suggestion

# enum

dotnet_naming_symbols.enum_symbols.applicable_kinds           = enum
dotnet_naming_symbols.enum_symbols.applicable_accessibilities = *

dotnet_naming_rule.enum_rule.symbols  = enum_symbols
dotnet_naming_rule.enum_rule.style    = pascal_case_style
dotnet_naming_rule.enum_rule.severity = suggestion

# property

dotnet_naming_symbols.property_symbols.applicable_kinds           = property
dotnet_naming_symbols.property_symbols.applicable_accessibilities = public

dotnet_naming_rule.property_rule.symbols  = property_symbols
dotnet_naming_rule.property_rule.style    = pascal_case_style
dotnet_naming_rule.property_rule.severity = suggestion

# method

dotnet_naming_symbols.method_symbols.applicable_kinds           = method
dotnet_naming_symbols.method_symbols.applicable_accessibilities = *

dotnet_naming_rule.method_rule.symbols  = method_symbols
dotnet_naming_rule.method_rule.style    = pascal_case_style
dotnet_naming_rule.method_rule.severity = suggestion

    # async

    dotnet_naming_symbols.async_method_symbols.applicable_kinds           = method
    dotnet_naming_symbols.async_method_symbols.applicable_accessibilities = *
    dotnet_naming_symbols.async_method_symbols.required_modifiers         = async

    dotnet_naming_rule.async_method_rule.symbols  = async_method_symbols
    dotnet_naming_rule.async_method_rule.style    = async_pascal_case_style
    dotnet_naming_rule.async_method_rule.severity = suggestion

# field

    # const
    dotnet_naming_symbols.const_symbols.required_modifiers = const

    dotnet_naming_rule.const_rule.symbols  = const_symbols
    dotnet_naming_rule.const_rule.style    = upper_case_style
    dotnet_naming_rule.const_rule.severity = suggestion

    # static private fields

    dotnet_naming_symbols.private_static_fields_symbols.applicable_kinds           = field
    dotnet_naming_symbols.private_static_fields_symbols.applicable_accessibilities = private
    dotnet_naming_symbols.private_static_fields_symbols.required_modifiers         = static

    dotnet_naming_rule.private_static_fields_rule.symbols  = private_static_fields_symbols
    dotnet_naming_rule.private_static_fields_rule.style    = camel_case_style
    dotnet_naming_rule.private_static_fields_rule.severity = suggestion

    # private field

    dotnet_naming_symbols.private_fields_symbols.applicable_kinds           = field
    dotnet_naming_symbols.private_fields_symbols.applicable_accessibilities = private

    dotnet_naming_rule.private_fields_rule.symbols  = private_fields_symbols
    dotnet_naming_rule.private_fields_rule.style    = camel_case_style
    dotnet_naming_rule.private_fields_rule.severity = suggestion

    # static public fields

    dotnet_naming_symbols.public_static_fields_symbols.applicable_kinds           = field
    dotnet_naming_symbols.public_static_fields_symbols.applicable_accessibilities = public
    dotnet_naming_symbols.public_static_fields_symbols.required_modifiers         = static

    dotnet_naming_rule.public_static_fields_rule.symbols  = public_static_fields_symbols
    dotnet_naming_rule.public_static_fields_rule.style    = pascal_case_style
    dotnet_naming_rule.public_static_fields_rule.severity = suggestion

    # public field

    dotnet_naming_symbols.public_fields_symbols.applicable_kinds           = field
    dotnet_naming_symbols.public_fields_symbols.applicable_accessibilities = public

    dotnet_naming_rule.public_fields_rule.symbols  = public_fields_symbols
    dotnet_naming_rule.public_fields_rule.style    = pascal_case_style
    dotnet_naming_rule.public_fields_rule.severity = suggestion

# event

dotnet_naming_symbols.event_symbols.applicable_kinds           = event
dotnet_naming_symbols.event_symbols.applicable_accessibilities = *

dotnet_naming_rule.event_rule.symbols  = event_symbols
dotnet_naming_rule.event_rule.style    = pascal_case_style
dotnet_naming_rule.event_rule.severity = suggestion

# delegate

dotnet_naming_symbols.delegate_symbols.applicable_kinds           = delegate
dotnet_naming_symbols.delegate_symbols.applicable_accessibilities = *

dotnet_naming_rule.delegate_rule.symbols  = delegate_symbols
dotnet_naming_rule.delegate_rule.style    = pascal_case_style
dotnet_naming_rule.delegate_rule.severity = suggestion

# parameter

dotnet_naming_symbols.parameter_symbols.applicable_kinds = parameter

dotnet_naming_rule.parameter_rule.symbols  = parameter_symbols
dotnet_naming_rule.parameter_rule.style    = camel_case_style
dotnet_naming_rule.parameter_rule.severity = suggestion

# type_parameter

dotnet_naming_symbols.type_parameter_symbols.applicable_kinds           = type_parameter
dotnet_naming_symbols.type_parameter_symbols.applicable_accessibilities = *

dotnet_naming_rule.type_parameter_rule.symbols  = type_parameter_symbols
dotnet_naming_rule.type_parameter_rule.style    = pascal_case_style
dotnet_naming_rule.type_parameter_rule.severity = suggestion

# local

dotnet_naming_symbols.local_symbols.applicable_kinds           = local
dotnet_naming_symbols.local_symbols.applicable_accessibilities = local

dotnet_naming_rule.local_rule.symbols  = local_symbols
dotnet_naming_rule.local_rule.style    = camel_case_style
dotnet_naming_rule.local_rule.severity = suggestion

# local_function

dotnet_naming_symbols.local_function_symbols.applicable_kinds           = local_function
dotnet_naming_symbols.local_function_symbols.applicable_accessibilities = local

dotnet_naming_rule.local_function_rule.symbols  = local_function_symbols
dotnet_naming_rule.local_function_rule.style    = camel_case_style
dotnet_naming_rule.local_function_rule.severity = suggestion

    # async

    dotnet_naming_symbols.async_local_function_symbols.applicable_kinds           = local_function
    dotnet_naming_symbols.async_local_function_symbols.applicable_accessibilities = local
    dotnet_naming_symbols.async_local_function_symbols.required_modifiers         = async

    dotnet_naming_rule.async_local_function_rule.symbols  = async_local_function_symbols
    dotnet_naming_rule.async_local_function_rule.style    = async_camel_case_style
    dotnet_naming_rule.async_local_function_rule.severity = suggestion

# language

csharp_prefer_braces                                       = true:suggestion
csharp_prefer_simple_using_statement                       = true:suggestion
csharp_preferred_modifier_order                            = true:suggestion
csharp_style_expression_bodied_accessors                   = true:suggestion
csharp_style_expression_bodied_constructors                = true:suggestion
csharp_style_expression_bodied_desconstructors             = true:suggestion
csharp_style_expression_bodied_indexers                    = true:suggestion
csharp_style_expression_bodied_local_functions             = true:suggestion
csharp_style_expression_bodied_methods                     = true:suggestion
csharp_style_expression_bodied_operators                   = true:suggestion
csharp_style_expression_bodied_operators                   = true:suggestion
csharp_style_expression_bodied_properties                  = true:suggestion
csharp_style_namespace_declarations                        = file_scoped:suggestion
csharp_style_prefer_switch_expression                      = true:suggestion
csharp_style_var_elsewhere                                 = true:suggestion
csharp_style_var_for_built_in_types                        = true:suggestion
csharp_style_var_when_type_is_apparent                     = true:suggestion
csharp_using_directive_placement                           = inside_namespace:suggestion
dotnet_style_collection_initializer                        = true:suggestion
dotnet_style_explicit_tuple_names                          = true:suggestion
dotnet_style_object_initializer                            = true:suggestion
dotnet_style_parentheses_in_arithmetic_binary_operators    = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_other_binary_operators         = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_other_operators                = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_relational_binary_operators    = never_if_unnecessary:suggestion
dotnet_style_prefer_auto_properties                        = true:silent
dotnet_style_prefer_compound_assignment                    = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return     = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names   = true:suggestion
dotnet_style_prefer_inferred_tuple_names                   = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions         = true:suggestion
dotnet_style_prefer_simplified_interpolation               = true:suggestion
dotnet_style_qualification_for_event                       = true:suggestion
dotnet_style_qualification_for_field                       = true:suggestion
dotnet_style_qualification_for_method                      = true:suggestion
dotnet_style_qualification_for_property                    = true:suggestion
dotnet_style_require_accessibility_modifiers               = always:suggestion

dotnet_remove_unnecessary_suppression_exclusions = suggestion
dotnet_separate_import_directive_groups          = suggestion
dotnet_sort_system_directives_first              = suggestion

dotnet_diagnostic.CA1001.severity = error # Types that own disposable fields should be disposable
dotnet_diagnostic.CS8073.severity = error # Converting null literal or possible null value to non-nullable type.
dotnet_diagnostic.CS8600.severity = error # The result of the expression is always 'true|false'.
dotnet_diagnostic.CS8601.severity = error # Null assignment.
dotnet_diagnostic.CS8602.severity = error # Dereference of a possibly null reference.
dotnet_diagnostic.CS8603.severity = error # Possible null reference return.
dotnet_diagnostic.CS8604.severity = error # Possible null reference argument.
dotnet_diagnostic.CS8606.severity = error # Possible null reference assignment to iteration variable
dotnet_diagnostic.CS8607.severity = error # A possible null value may not be passed to a target marked with the [DisallowNull] attribute
dotnet_diagnostic.CS8608.severity = error # Nullability of reference types in type doesn't match overridden member.
dotnet_diagnostic.CS8609.severity = error # Nullability of reference types in return type doesn't match overridden member.
dotnet_diagnostic.CS8610.severity = error # Nullability of reference types in type of parameter doesn't match overridden member.
dotnet_diagnostic.CS8611.severity = error # Nullability of reference types in type of parameter doesn't match partial method declaration.
dotnet_diagnostic.CS8612.severity = error # Nullability of reference types in type doesn't match implicitly implemented member.
dotnet_diagnostic.CS8613.severity = error # Nullability of reference types in return type doesn't match implicitly implemented member.
dotnet_diagnostic.CS8614.severity = error # Nullability of reference types in type of parameter doesn't match implicitly implemented member.
dotnet_diagnostic.CS8615.severity = error # Nullability of reference types in type doesn't match implemented member.
dotnet_diagnostic.CS8616.severity = error # Nullability of reference types in return type doesn't match implemented member.
dotnet_diagnostic.CS8617.severity = error # Nullability of reference types in type of parameter doesn't match implemented member.
dotnet_diagnostic.CS8618.severity = error # Non-nullable property is uninitialized. Consider declaring the property as nullable.
dotnet_diagnostic.CS8619.severity = error # Nullability of reference types in value doesn't match target type.
dotnet_diagnostic.CS8620.severity = error # Argument cannot be used for parameter due to differences in the nullability of reference types.
dotnet_diagnostic.CS8621.severity = error # Nullability of reference types in return type doesn't match the target delegate.
dotnet_diagnostic.CS8622.severity = error # Nullability of reference types in type of parameter doesn't match the target delegate.
dotnet_diagnostic.CS8624.severity = error # Argument cannot be used as an output for parameter due to differences in the nullability of reference types.
dotnet_diagnostic.CS8625.severity = error # Cannot convert null literal to non-nullable reference type.
dotnet_diagnostic.CS8625.severity = error # Cannot convert null literal to non-nullable reference type.
dotnet_diagnostic.CS8626.severity = error # The 'as' operator may produce a null value for a type parameter.
dotnet_diagnostic.CS8629.severity = error # Nullable value type may be null.
dotnet_diagnostic.CS8631.severity = error # The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn't match constraint type.
dotnet_diagnostic.CS8632.severity = error # The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
dotnet_diagnostic.CS8633.severity = error # Nullability in constraints for type parameter doesn't match the constraints for type parameter in implicitly implemented interface method.
dotnet_diagnostic.CS8634.severity = error # The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn't match 'class' constraint.
dotnet_diagnostic.CS8638.severity = error # Conditional access may produce a null value for a type parameter.
dotnet_diagnostic.CS8643.severity = error # Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type.
dotnet_diagnostic.CS8644.severity = error # Type does not implement interface member. Nullability of reference types in interface implemented by the base type doesn't match.
dotnet_diagnostic.CS8645.severity = error # Interface is already listed in the interface list with different nullability of reference types.
dotnet_diagnostic.CS8653.severity = error # A default expression introduces a null value for a type parameter.
dotnet_diagnostic.CS8654.severity = error # A null literal introduces a null value for a type parameter.
dotnet_diagnostic.CS8655.severity = error # The switch expression does not handle some null inputs.
dotnet_diagnostic.CS8667.severity = error # Partial method declarations have inconsistent nullability in constraints for type parameter
dotnet_diagnostic.CS8714.severity = error # The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn't match 'notnull' constraint.

# dotnet_diagnostic.CA1707.severity  = suggestion # Identifiers should not contain underscores BROKEN!!!
dotnet_diagnostic.CA1721.severity  = suggestion # Property names should not match get methods
dotnet_diagnostic.CA1725.severity  = suggestion # Parameter names should match base declaration
dotnet_diagnostic.CA1802.severity  = suggestion # Use Literals Where Appropriate
dotnet_diagnostic.CA1805.severity  = suggestion # Do not initialize unnecessarily.
dotnet_diagnostic.CA1810.severity  = suggestion # Initialize reference type static fields
dotnet_diagnostic.CA1836.severity  = suggestion # Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1836.severity  = suggestion # Property names should not match get methods
dotnet_diagnostic.CA1861.severity  = suggestion # Avoid constant arrays as arguments
dotnet_diagnostic.CA2254.severity  = suggestion # Remove unnecessary suppression operator
dotnet_diagnostic.IDE0001.severity = suggestion # Name can be simplyfied
dotnet_diagnostic.IDE0002.severity = suggestion # Name can be simplyfied
dotnet_diagnostic.IDE0004.severity = suggestion # Redundant conversion
dotnet_diagnostic.IDE0005.severity = suggestion # Remove unnecessary using directives
dotnet_diagnostic.IDE0010.severity = none       # Add missing cases to switch statement
dotnet_diagnostic.IDE0032.severity = suggestion # Use auto property
dotnet_diagnostic.IDE0047.severity = suggestion # Remove unnecessary cast
dotnet_diagnostic.IDE0049.severity = suggestion # Name can be simplyfied
dotnet_diagnostic.IDE0055.severity = none       # Formatting rule
dotnet_diagnostic.IDE0058.severity = none       # Remove unnecessary expression value
dotnet_diagnostic.IDE0078.severity = none       # Use pattern matching
dotnet_diagnostic.IDE0080.severity = suggestion # Remove unnecessary suppression operator
dotnet_diagnostic.IDE0082.severity = suggestion # Convert typeof to nameof
dotnet_diagnostic.IDE1006.severity = suggestion # Remove unnecessary suppression operator

[source/Godot.Net/Platforms/Windows/DisplayServerWindows.*.cs]
dotnet_naming_rule.public_fields_rule.severity = none
dotnet_diagnostic.CA1707.severity              = none

[*.{csproj,xml,yml,yaml}]
indent_style = space
indent_size  = 2

[*.md]
trim_trailing_whitespace = false
